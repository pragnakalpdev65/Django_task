Task: Django E-commerce App (Class-Based Views Focus)
Overview: This task will help you practice advanced Django concepts including Class-Based Views (CBVs), Generic Views, Forms with Validation, User Authentication, and Session Management by building a basic e-commerce website.
1. Set up the Django project and app
   - Create a new Django project and app.
   - Configure settings, templates, static files, and URLs.
2. Define the core models
   - Create models: `Product`, `Category`, `CartItem`, and `Order`.
   - `Product` should include: name, description, price, image (`ImageField`), and category (as a foreign key).
   - Define appropriate relationships.
   - Register models in the admin panel and create sample data for testing.
3. Product listing and search functionality
   - Display all products on the homepage.
   - Add searching, sorting and filtering functionalities.
   - Show product image, name, and price in a card/grid layout.
4. Product detail page
   - Show full product details (image, name, price, description).
   - Include an "Add to Cart" form on this page.
5. Admin product management (CRUD with validation)
   - Use `CreateView`, `UpdateView`, and `DeleteView` for managing products.
   - Build forms using `ModelForm` and apply validation.
   - Restrict access using `LoginRequiredMixin`.
   - Display form errors in templates clearly.
6. User authentication
   - Set up registration using `UserCreationForm` and `CreateView`.
   - Use built-in `LoginView` and `LogoutView`.
   - Validate registration inputs.
7. User session management
   - Configure session settings: timeout, cookie expiration in `settings.py`.
   - Maintain logged-in user state across views.
   - Display session-based info (e.g., username, session expiry).
   - Ensure secure logout clears the session completely.
   - Redirect to login if session expires or unauthorized access occurs.
8. Cart functionality (with session)
   - Allow users to add products to cart.
   - Store cart data.
   - Use a custom or `FormView` to handle add-to-cart actions.
   - Display all cart items, total price, and allow quantity updates/removals.
   - Validate form inputs (e.g., quantity must be a positive number).
9. Checkout and order placement (with form validation)
   - Use a `FormView` or `CreateView` for the checkout process.
   - Collect name, email, shipping address with a custom form.
   - Validate fields (e.g., email format, address length).
   - On success, save the order and related cart items in the DB.
   - Redirect to an order confirmation/thank-you page.
10. Templates and UI styling
   - Create a base template with reusable structure.
   - Use Bootstrap or Tailwind or custom CSS for clean and responsive design.
   - Style forms properly and show validation errors.